=head1	記事の処理

=head2	記事番号


# Descriptions: 記事番号を保存するファイル (ダミー？)
#      History: $SEQ_FILE
#        Value: filename
#     Examples:
article_sequence_file	= $sequence_file


=head2 ACL


# Descriptions: 弾いたメールをどのようにフォワードするか？
#               ウィルスなどを考慮すると、文字列がいいとおもう
#      History: 4.0 では文字列で、これはハードコーディングされていた。
#        Value: multipart / string
#     Examples: string
article_post_restrictions_reject_notice_data_type	=	string


=head2	サイズ制限


# Descriptions: 投稿された記事のヘッダの上限値
#               (MTA から fml が受けとる際の記事のヘッダサイズの上限値)
#      History:
#        Value: NUM
#     Examples: 102400
incoming_article_header_size_limit	= $default_mail_header_size_limit


# Descriptions: 投稿された記事の本文の上限値
#               (MTA から fml が受けとる際の記事の本文サイズの上限値)
#      History:
#        Value: NUM
#     Examples: 10240000
incoming_article_body_size_limit	= $default_mail_body_size_limit


# Descriptions: 投稿された記事の(配送時の)ヘッダの上限値
#               (fml から MTA へ渡す際の記事のヘッダサイズの上限値)
#		(ごめん、この機能は未実装;-)
#      History:
#        Value: NUM
#     Examples: 102400
outgoing_article_header_size_limit	= $default_mail_header_size_limit


# Descriptions: 投稿された記事の(配送時の)本文の上限値
#               (fml から MTA へ渡す際の記事の本文サイズの上限値)
#		(ごめん、この機能は未実装;-)
#        Value: NUM
#     Examples: 10240000
outgoing_article_body_size_limit	= $default_mail_body_size_limit


=head2	フィルタ


# Descriptions:
#      History:
#        Value:
#     Examples:
use_article_filter	= 	yes
 

# Descriptions:
#      History:
#        Value:
#     Examples:
article_filter_functions	=	article_size_filter
					article_header_filter
					article_non_mime_filter
					article_mime_component_filter
					article_text_plain_filter


=head2	サイズ制限ベースのフィルタ


# Descriptions: サイズ情報を根拠にしたフィルタリングをするか？
#      History:
#        Value: yes / no
#     Examples:
use_article_size_filter	=	yes


# Descriptions: フィルタリングのルール。
#               どのルールにもマッチしないなら、記事の投稿は認められる。
#      History:
#        Value:
#     Examples:
article_size_filter_rules	=	check_header_size
					check_body_size
					permit


=head2	ヘッダ情報ベースのフィルタ


# Descriptions: ヘッダ情報を根拠にしたフィルタリングをするか？
#      History:
#        Value: yes / no
#     Examples:
use_article_header_filter		=	yes


# Descriptions: フィルタリングのルール。
#               どのルールにもマッチしないなら、記事の投稿は認められる。
#      History:
#        Value:
#     Examples:
article_header_filter_rules		=	check_message_id
						check_date
						permit


=head2	MIME 情報ベースのフィルタ


# Descriptions: とりあえず、だみ〜
#      History: 4.0 の content filter で、!MIME にあたる部分
#        Value: yes / no
#     Examples:
use_article_non_mime_filter		=	yes


# Descriptions: とりあえず、だみ〜
#      History: なし
#        Value: permit / reject_empty_content_type
#     Examples: permit
article_non_mime_filter_rules		=	reject_empty_content_type
						permit


# Descriptions: MIME の構造に基づいたフィルタを行なう
#      History: 4.0 の content filter 相当
#        Value: yes / no
#     Examples:
use_article_mime_component_filter	=	yes


# Descriptions: ファイル名
#      History: 4.0 の @CONTENT_HANDLER 相当
#        Value:
#     Examples:
article_mime_component_filter_rules	= $fml_config_dir/mime_component_filter



=head2	テキスト部分に対するフィルタ


# Descriptions: 先頭の text/plain 部分に対するフィルタ。
#		簡単なシンタックスチェック
#      History: 4.0 の EnvelopeFilter 相当
#        Value: yes / no
#     Examples:
use_article_text_plain_filter		=	yes


# Descriptions: テキスト部分へのフィルタリングのルール。
#               正確には弾くべき特別なもののルール(マッチしないなら通す)
#      History: See kern/libenvf.pl for more detail.
#		[DISABLED BY DEFAULT]
#
#			reject_not_iso2022jp_japanese_string
#				<=> FILTER_ATTR_REJECT_INVALID_JAPANESE
#			reject_old_fml_command_syntax
#				<=> FILTER_ATTR_REJECT_COMMAND
#			reject_japanese_command_syntax
#				<=> FILTER_ATTR_REJECT_2BYTES_COMMAND
#
#		[ENABLED BY DEFAULT]
#
#			reject_null_mail_body
#				<=> FILTER_ATTR_REJECT_NULL_BODY
#			reject_invalid_fml_command_syntax
#				<=> FILTER_ATTR_REJECT_INVALID_COMMAND
#			reject_one_line_message
#				<=> FILTER_ATTR_REJECT_ONE_LINE_BODY
#			reject_ms_guid
#				<=> FILTER_ATTR_REJECT_MS_GUID
#
#         Note: permit by default 
#        Value:
#     Examples:
article_text_plain_filter_rules	=	reject_not_iso2022jp_japanese_string
					reject_null_mail_body
					reject_one_line_message
					reject_old_fml_command_syntax
					reject_invalid_fml_command_syntax
					reject_japanese_command_syntax
					reject_ms_guid
					permit


=head2	フィルタで弾かれたことを教える


# Descriptions: フィルタで弾かれたことを教える
#      History: maintainer には常に弾かれたことを知らせるが、
#		sender に対しては $FILTER_NOTIFY_REJECTION (= 0 by default)。
#		デフォルトでは、管理者にのみ知らせる。
#        Value: yes / no
#     Examples: yes
use_article_filter_reject_notice	=	yes


# Descriptions: エラーのお知らせの受信者
#      History: 4.0 では maintainer あてはハードコーデイングで常に知らせる。
#		sender 宛ては $FILTER_NOTIFY_REJECTION で制御されていて
#		デフォルトでは知らせない。
#        Value: maintainer | sender
#     Examples: maintainer sender
article_filter_reject_notice_recipients	=	maintainer
						sender


# Descriptions: 弾いたメールをどのようにフォワードするか？
#               ウィルスなどを考慮すると、文字列がいいとおもう
#      History: 4.0 では文字列で、これはハードコーディングされていた。
#        Value: multipart / string
#     Examples: string
article_filter_reject_notice_data_type	=	string
