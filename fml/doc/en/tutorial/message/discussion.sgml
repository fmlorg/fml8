<!--
   $FML$
   $jaFML: discussion.sgml,v 1.4 2003/04/15 14:51:42 fukachan Exp $
-->

<sect1>
	<title>
	Discussion: how to send back language dependent error mesages
	</title>

<para>
fml needs to send back language dependent error mesages.
How we should implement it ?
</para>


<!-- ===================================================== -->
<sect2>
	<title>
	&fml4; case
	</title>

<para>
In the case of &fml4;, call language dependent message converter like
this:
<screen>
   Mesg(*e, KEYWORD, DEFAULT MESSAGE, ARGUMENT);
</screen>
</para>

<para>
Mesg() searches the specified keyword in files
/usr/local/fml/messages/Japanese/ directory. Each file contains
messages with keywords to be substituted properly.
</para>

<para>
For example, the keyword not_found matches not_found entry in 
/usr/local/fml/messages/Japanese/kern file.
</para>

</sect2>



<!-- ===================================================== -->
<sect2>
	<title>
	What &fmldevel; should do ?
	</title>

<para>
Hmm, which is better ? "One file has one keyword" and "one file for
one category, so one file contains plural entries".
I don't determine it.
</para>

<sect3>
   <title>
    X/Open Portability Guide Issue 4 Version 2 (``XPG4.2'')
   </title>

<para>
If you use XPG (X/Open standard), 
<screen>
catgets(catd, set_id, msg_id, char *s);
</screen>
function converts the message specified by LOCALE_XXX.
	<footnote>
	<para>
	"s" is the default message.
	</para>
	</footnote>
For example, the usage is as follows:
<screen>
printf(catgets(catd, 30,  4,  "%s: Internal match error.\n"), progname);
</screen>
Thie function uses se 30 and entry 4 in th local definition file such
as /usr/pkg/share/nls/ja_JP.EUC/PROGNAME.cat.
</para>

</sect3>

<sect3>
   <title>
   &fmldevel;: design (temporary ?)
   </title>

<para>
One problem is whether we should use locale or not ?
By considering CUI e.g. makefml, it is better to use locale.
For example, prepare
<screen>
/usr/local/lib/fml/$fml_version/messages/ja_JP.EUC/kern

1: %s not found
2: %s (error number = %d)
</screen>
.
</para>

<para>
Instead one file for one message may be useful.
Especially we can customize only one message.
</para>

<para>
To try the latter case, we can prepare a lot of classes such as
<screen>
FML::Message::ja::KEYWORD
</screen>
For example, there are 200 or 300 files such as
<screen>
FML::Message::ja::not_found
</screen>
.
</para>

<para>
This methods has the following problems:
<itemizedlist>
   <listitem>
	<para>
 	separete files but in contrast more customizable.
	</para>
   </listitem>

   <listitem>
	<para>
 	locale friendly? may be no.
	</para>
   </listitem>

</itemizedlist>
</para>


<para>
Consider the example. In the latter case, 
the message module will be like this?
<screen>
sub not_found
{
   my ..  = @_;

   return <<"_EOF_"
$sender is ... something ...
_EOF_
}
</screen>
hmm, is it good ???
</para>

</sect3>


</sect2>

</sect1>
