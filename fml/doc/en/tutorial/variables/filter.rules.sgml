<para>
<screen>

# Descriptions: how to inform the rejected message 
#               when the filter system rejects.
#               We prefer string not mime/multipart to avoid parsing by MUA.
#      History: string in 4.0.
#        Value: multipart / string
#     Examples: string
article_post_restrictions_reject_notice_data_type	=	string


=head2	filter


# Descriptions:
#      History: fml8 rearragena fml4 filter functions and integrates them
#		into one.
#		Roughly speaking, fml8 filter is composed of the following
#			$USE_DISTRIBUTE_FILTER
#			$INCOMING_MAIL_SIZE_LIMIT
#			ADD_CONTENT_HANDLER()
#		functions.
#        Value: yes / no
#     Examples: yes
use_article_filter	= 	yes
 

# Descriptions:
#      History:
#        Value:
#     Examples:
article_filter_functions	=	article_size_filter
					article_header_filter
					article_non_mime_filter
					article_mime_component_filter
					article_text_plain_filter
					article_spam_filter
					article_virus_filter


=head2	size based filter


# Descriptions: use size based filter.
#      History: no
#        Value: yes / no
#     Examples:
use_article_size_filter	=	yes


# Descriptions: size based filter rules.
#               first match. 
#               permit post if no rule matched.
#      History:
#        Value:
#     Examples:
article_size_filter_rules	=	check_header_size
					check_body_size
					permit


=head2	header base filter


# Descriptions: use header based filter ?
#      History: disabled by default.
#               "yes" always if $USE_DISTRIBUTE_FILTER is yes.
#        Value: yes / no
#     Examples:
use_article_header_filter		=	yes


# Descriptions: header filter rules.
#               first match. 
#               permit post if no rule matched.
#      History: fml4 has no check_date rule.
#        Value:
#     Examples:
article_header_filter_rules		=	check_message_id
						check_date
						permit


=head2	filter for non MIME structure


# Descriptions: dummy
#      History: disabled by default.
#		!MIME of 4.0 content filter.
#        Value: yes / no
#     Examples:
use_article_non_mime_filter		=	yes


# Descriptions: dummy
#      History:
#        Value: permit / reject
#     Examples: permit
article_non_mime_filter_rules		=	permit


# Descriptions: MIME structure based filter
#      History: 4.0 content filter. disabled by default.
#        Value: yes / no
#     Examples:
use_article_mime_component_filter	=	yes


# Descriptions: file of filter rules
#      History: @CONTENT_HANDLER
#        Value:
#     Examples:
article_mime_component_filter_rules	= $fml_config_dir/mime_component_filter

=head2	filter for text/plain


# Descriptions: use text/plain filter, which is a simple syntax checker.
#      History: 4.0's EnvelopeFilter.
#		half of the following rules applied when
#		$USE_DISTRIBUTE_FILTER is enabled.
#        Value: yes / no
#     Examples:
use_article_text_plain_filter		=	yes


# Descriptions: filter rules of text/plain filter.
#               first match.
#               permit post if no rule matched.
#      History: See kern/libenvf.pl for more detail.
#		[DISABLED BY DEFAULT]
#
#			reject_not_iso2022jp_japanese_string
#				<=> FILTER_ATTR_REJECT_INVALID_JAPANESE
#			reject_old_fml_command_syntax
#				<=> FILTER_ATTR_REJECT_COMMAND
#			reject_japanese_command_syntax
#				<=> FILTER_ATTR_REJECT_2BYTES_COMMAND
#
#		[ENABLED BY DEFAULT]
#
#			reject_null_mail_body
#				<=> FILTER_ATTR_REJECT_NULL_BODY
#			reject_invalid_fml_command_syntax
#				<=> FILTER_ATTR_REJECT_INVALID_COMMAND
#			reject_one_line_message
#				<=> FILTER_ATTR_REJECT_ONE_LINE_BODY
#			reject_ms_guid
#				<=> FILTER_ATTR_REJECT_MS_GUID
#
#         Note: permit by default 
#        Value:
#     Examples:
article_text_plain_filter_rules	=	reject_not_iso2022jp_japanese_string
					reject_null_mail_body
					reject_one_line_message
					reject_old_fml_command_syntax
					reject_invalid_fml_command_syntax
					reject_japanese_command_syntax
					reject_ms_guid
					permit


=head2	external SPAM filter


# Descriptions: use external spam checker.
#		disabled by default.
#		add flag to header and go through if the message looks a spam.
#      History: none
#        Value: yes | no
#     Examples: no
use_article_spam_filter		=	no


# Descriptions: action if the message looks a spam.
#      History: none
#        Value: reject | ignore | header_rewrite
#     Examples: header_rewrite
article_spam_filter_rules	=	header_rewrite


# Descriptions: external spam checker.
#		if plural drivers specified, try them sequentially.
#      History: none
#        Value: spamassasin | spamc | bogofilter
#     Examples: bogofilter
article_spam_filter_drivers	=	bogofilter


# Descriptions: external virus checker. disabled by default.
#      History: none
#        Value: yes | no
#     Examples: no
use_article_virus_filter	=	no


# Descriptions: action if virus found.
#      History: none
#        Value: reject | ignore | header_rewrite
#     Examples: reject
article_virus_filter_rules	=	reject


# Descriptions: external virus checker.
#		if plural drivers specified, try them sequentially.
#      History: none
#        Value: clamscan 
#     Examples: clamscan
article_virus_filter_drivers	=	clamscan

=head2	inform the filter rejection


# Descriptions: infor the filter rejection ?
#      History: halfly hard-coded in fml 4.0.
#		notice is always sent to maintainer, 
#		but not to sender by default.
#		$FILTER_NOTIFY_REJECTION controlls notice to sender.
#        Value: yes / no
#     Examples: yes
use_article_filter_reject_notice	=	yes


# Descriptions: recipients to inform
#      History: halfly hard-coded in fml 4.0.
#		notice is always sent to maintainer, 
#		but not to sender by default.
#		$FILTER_NOTIFY_REJECTION controlls notice to sender.
#        Value: maintainer | sender
#     Examples: maintainer sender
article_filter_reject_notice_recipients	=	maintainer
						sender


# Descriptions: how fml refer the rejeced message.
#               We prefer string not multipart to avoid parsing of MUA.
#      History: string in fml 4.0.
#        Value: multipart / string
#     Examples: string
article_filter_reject_notice_data_type	=	string


# Descriptions:
#      History:
#        Value:
#     Examples:
use_article_spam_filter		=	no


# Descriptions: list up driver names used as spam checker.
#      History: none
#        Value: spamassassin | spamc | bogofilter
#     Examples: bogofilter
article_spam_filter_functions	=	bogofilter


# Descriptions: exit non-zero status code when spam caught if "-e" specified.
#      History: none
#        Value: STR
#     Examples: -e
article_spam_filter_spamassassin_options	=	-e


# Descriptions: spamc optoins. "-c" means check only.
#      History: none
#        Value: STR
#     Examples: -c
article_spam_filter_spamc_options		=	-c


# Descriptions: "-e" implies embedded mode.
#      History: none
#        Value: STR
#     Examples: -e
article_spam_filter_bogofilter_options		=	-e


=head2	filter


# Descriptions:
#      History:
#        Value:
#     Examples:
use_command_mail_filter	= 	yes
 

# Descriptions:
#      History:
#        Value:
#     Examples:
command_mail_filter_functions	=	command_mail_size_filter


=head2	size based filter


# Descriptions: use size based filter
#      History:
#        Value: yes / no
#     Examples:
use_command_mail_size_filter	=	yes


# Descriptions: size based filter rules.
#               first match.
#               permit if no rule matched.
#      History:
#        Value:
#     Examples:
command_mail_size_filter_rules	=	check_header_size
					check_body_size
					check_command_limit
					check_line_length_limit
					permit


=head2	inform filter rejection


# Descriptions: inform filter rejection ?
#      History: hard-coded.
#        Value: yes / no
#     Examples: yes
use_command_mail_filter_reject_notice	=	yes


# Descriptions: recipients to inform
#      History: hard-coded.
#        Value: maintainer | sender
#     Examples: maintainer sender
command_mail_filter_reject_notice_recipients	=	maintainer
							sender


# Descriptions: how fml refer the rejeced message.
#               We prefer string not multipart to avoid parsing of MUA.
#      History: string in fml 4.0.
#        Value: multipart / string
#     Examples: string
command_mail_filter_reject_notice_data_type	=	string

path_bogofilter           = @BOGOFILTER@

# $article_digest_finish_end_hook = q{ 1;};
# $article_digest_finish_start_hook = q{ 1;};
# $article_digest_prepare_end_hook = q{ 1;};
# $article_digest_prepare_start_hook = q{ 1;};
# $article_digest_run_end_hook = q{ 1;};
# $article_digest_run_start_hook = q{ 1;};
# $article_digest_verify_request_end_hook = q{ 1;};
# $article_digest_verify_request_start_hook = q{ 1;};
# $article_filter_end_hook = q{ 1;};
# $article_filter_start_hook = q{ 1;};
# $article_header_rewrite_end_hook = q{ 1;};
# $article_header_rewrite_start_hook = q{ 1;};
# $article_post_finish_end_hook = q{ 1;};
# $article_post_finish_start_hook = q{ 1;};
# $article_post_prepare_end_hook = q{ 1;};
# $article_post_prepare_start_hook = q{ 1;};
# $article_post_run_end_hook = q{ 1;};
# $article_post_run_start_hook = q{ 1;};
# $article_post_verify_request_end_hook = q{ 1;};
# $article_post_verify_request_start_hook = q{ 1;};
# $command_mail_filter_end_hook = q{ 1;};
# $command_mail_filter_start_hook = q{ 1;};
# $command_mail_finish_end_hook = q{ 1;};
# $command_mail_finish_start_hook = q{ 1;};
# $command_mail_prepare_end_hook = q{ 1;};
# $command_mail_prepare_start_hook = q{ 1;};
# $command_mail_run_end_hook = q{ 1;};
# $command_mail_run_start_hook = q{ 1;};
# $command_mail_verify_request_end_hook = q{ 1;};
# $command_mail_verify_request_start_hook = q{ 1;};
# $distribute_finish_end_hook = q{ 1;};
# $distribute_finish_start_hook = q{ 1;};
# $distribute_prepare_end_hook = q{ 1;};
# $distribute_prepare_start_hook = q{ 1;};
# $distribute_run_end_hook = q{ 1;};
# $distribute_run_start_hook = q{ 1;};
# $distribute_verify_request_end_hook = q{ 1;};
# $distribute_verify_request_start_hook = q{ 1;};
# $error_mail_analyzer_finish_end_hook = q{ 1;};
# $error_mail_analyzer_finish_start_hook = q{ 1;};
# $error_mail_analyzer_prepare_end_hook = q{ 1;};
# $error_mail_analyzer_prepare_start_hook = q{ 1;};
# $error_mail_analyzer_run_end_hook = q{ 1;};
# $error_mail_analyzer_run_start_hook = q{ 1;};
# $error_mail_analyzer_verify_request_end_hook = q{ 1;};
# $error_mail_analyzer_verify_request_start_hook = q{ 1;};
# $faker_finish_end_hook = q{ 1;};
# $faker_finish_start_hook = q{ 1;};
# $faker_prepare_end_hook = q{ 1;};
# $faker_prepare_start_hook = q{ 1;};
# $faker_run_end_hook = q{ 1;};
# $faker_run_start_hook = q{ 1;};
# $faker_verify_request_end_hook = q{ 1;};
# $faker_verify_request_start_hook = q{ 1;};
# $fmladdr_finish_end_hook = q{ 1;};
# $fmladdr_finish_start_hook = q{ 1;};
# $fmladdr_prepare_end_hook = q{ 1;};
# $fmladdr_prepare_start_hook = q{ 1;};
# $fmladdr_run_end_hook = q{ 1;};
# $fmladdr_run_start_hook = q{ 1;};
# $fmladdr_verify_request_end_hook = q{ 1;};
# $fmladdr_verify_request_start_hook = q{ 1;};
# $fmlalias_finish_end_hook = q{ 1;};
# $fmlalias_finish_start_hook = q{ 1;};
# $fmlalias_prepare_end_hook = q{ 1;};
# $fmlalias_prepare_start_hook = q{ 1;};
# $fmlalias_run_end_hook = q{ 1;};
# $fmlalias_run_start_hook = q{ 1;};
# $fmlalias_verify_request_end_hook = q{ 1;};
# $fmlalias_verify_request_start_hook = q{ 1;};
# $fmlconf_finish_end_hook = q{ 1;};
# $fmlconf_finish_start_hook = q{ 1;};
# $fmlconf_prepare_end_hook = q{ 1;};
# $fmlconf_prepare_start_hook = q{ 1;};
# $fmlconf_run_end_hook = q{ 1;};
# $fmlconf_run_start_hook = q{ 1;};
# $fmlconf_verify_request_end_hook = q{ 1;};
# $fmlconf_verify_request_start_hook = q{ 1;};
# $fmldoc_finish_end_hook = q{ 1;};
# $fmldoc_finish_start_hook = q{ 1;};
# $fmldoc_prepare_end_hook = q{ 1;};
# $fmldoc_prepare_start_hook = q{ 1;};
# $fmldoc_run_end_hook = q{ 1;};
# $fmldoc_run_start_hook = q{ 1;};
# $fmldoc_verify_request_end_hook = q{ 1;};
# $fmldoc_verify_request_start_hook = q{ 1;};
# $fmlhtmlify_finish_end_hook = q{ 1;};
# $fmlhtmlify_finish_start_hook = q{ 1;};
# $fmlhtmlify_prepare_end_hook = q{ 1;};
# $fmlhtmlify_prepare_start_hook = q{ 1;};
# $fmlhtmlify_run_end_hook = q{ 1;};
# $fmlhtmlify_run_start_hook = q{ 1;};
# $fmlhtmlify_verify_request_end_hook = q{ 1;};
# $fmlhtmlify_verify_request_start_hook = q{ 1;};
# $makefml_finish_end_hook = q{ 1;};
# $makefml_finish_start_hook = q{ 1;};
# $makefml_prepare_end_hook = q{ 1;};
# $makefml_prepare_start_hook = q{ 1;};
# $makefml_run_end_hook = q{ 1;};
# $makefml_run_start_hook = q{ 1;};
# $makefml_verify_request_end_hook = q{ 1;};
# $makefml_verify_request_start_hook = q{ 1;};

</screen>
</para>
