<!--
   $FML: post_permit_anyone.sgml,v 1.8 2005/11/19 08:24:33 fukachan Exp $
-->


<sect1 id="config.post.permitanyone">
	<title>
	ケーススタディ: 誰でも投稿可能なＭＬ
	</title>

<para>
article_post_restrictions は記事の投稿を許すメンバーを定義しています。
これを permit_anyone とすると、だれでも投稿可能になります。
<screen>
article_post_restrictions = permit_anyone
</screen>
</para>

<para>
&fml4; と異なり、上のように書くと本当に「誰でも投稿可能」であることに
注意して下さい。
reject_system_special_accounts という root などを弾くルールが別途あります。
</para>

<para>
&fml4; のように、rootなどシステムの特別なアカウントは弾き、それ以外の
ユーザからのメールは受け付けるという場合、次のようにします。
<screen>
article_post_restrictions =	reject_system_special_accounts
				permit_anyone
</screen>
</para>

<para>
ちなみに article_post_restrictions のデフォルトは &fml4; 互換のため、
次のようになっています。 
<screen>
article_post_restrictions =	reject_system_special_accounts
				permit_member_maps
				reject
</screen>
この意味は
「root  などシステムの特別なアカウントは弾き」
「member_maps にあるユーザであれば投稿を許す」
いづれにもマッチしないなら「投稿を拒否する」
となります。
</para>

<para>
なお「rejectなになに」および「 permitなになに」という命令はマッチした
ところで処理が終りに、マッチしない場合は次の条件を試すことになっていま
す。
</para>



<sect2 id="recipes.config.post.permitanyone">
	<title>
	レシピ’s
	</title>

<qandaset>

<qandaentry>

<question>
<para>
自ドメインなら誰でも投稿できる ML
</para>
</question>

<answer>
<para>
&fml4; のように HOOK でグローバル変数をいじくり回すといった
危ないことは出来せん。
</para>

<para>
IO::Adapter の pcre サポートを利用すれば example.co.jp ドメインからの
投稿を許し、それ以外からの投稿を拒否する restrictions が書けます。
<screen>
[/var/spool/ml/elena/config.cf]

article_post_restrictions       =       reject_system_special_accounts
                                        permit_member_maps
                                        reject

member_maps                     =       pcre:$ml_home_dir/sender.pcre

[$ml_home_dir/domains]
        \S+\@example.co.jp
</screen>
</para>
</answer>

</qandaentry>

</qandaset>

</sect2>


</sect1>
