#! @im_path_perl@
################################################################
###
###		  imgrep :: Internet Message g/RE/p
###
### Author:  Internet Message Group <img@mew.org>
### Created: Apr 23, 1997
### Revised: Jul  4, 2004
###

BEGIN {
    @im_my_siteperl@
    @im_src_siteperl@
};

$Prog = 'imgrep';
my $VERSION_DATE = "20040704";
my $VERSION_NUMBER = "147";
my $VERSION = "${Prog} version ${VERSION_DATE}(IM${VERSION_NUMBER})";
my $VERSION_INFORMATION = "${Prog} (IM ${VERSION_NUMBER}) ${VERSION_DATE}
Copyright (C) 1999 IM developing team
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
";

##
## Require packages
##

use IM::Config;
use IM::Folder;
use IM::Grep;
use IM::Util;
use integer;
use strict;
use vars qw($Prog $EXPLANATION @OptConfig
	    $opt_format @opt_src $opt_casefold $opt_expression
	    $opt_delimiter $opt_dupchecktarget $opt_verbose $opt_debug
	    $opt_quiet $opt_help $opt_version);

##
## Environments
##

$opt_format = 'number';		# use number, folder, or path
$opt_casefold = 'yes';		# default case-insensitive

my @default_ranges = ();
my @opt_folders = ();

my $eval_string = '';		# store search engine

# regexp for range syntax (sequence not supported)
my $range_element = '(\\d+|cur|first|last|next|prev|new)';
my $range_regexp = "($range_element(-$range_element|:[+-]?\\d+)?|all)";
my $ranges_regexp = "$range_regexp(,$range_regexp)?";

$EXPLANATION = "$VERSION
search for mail/news messages

Usage: $Prog [OPTIONS] [FOLDER] [RANGE]
";

@OptConfig = (
    'src;F@;;' => 'msg source: "+folder:[range[,range..]]"',
    'format;s;;' => 'Output format: "number", "folder", or "path"'.
	"\n\t\t(default: \"number\" for single target folder".
	"\n\t\t	     \"path\" for multiple target folders)",
    'casefold;b;on;' => 'Case sensitivity'.
	"\n\t\t(This option affects both fieldname and pattern)",
    'expression;s;;' => 'Search expression:'.
	"\n\n\t\tUsable keyword".
        "\n\t\t\t& &&		     logical AND".
        "\n\t\t\t| ||		     logical OR".
        "\n\t\t\t!		     logical NOT".
        "\n\t\t\t( )		     parens".
        "\n\t\t\tfieldname=pattern	     search pattern for the field".
        "\n\n\t\tSpecial fieldname:".
        "\n\t\t\thead	     Entire header".
        "\n\t\t\tbody	     Entire body".
        "\n\t\t\tall	     Entire message",
    'delimiter;s;\n\n|\n----\n;' => 'Mail header delimiter',
    'dupchecktarget,D;s;none;' => 'Duplicate Check Target',
    'quiet;b;;'   => 'Suppress informational messages',
    'verbose;b;;' => 'With diagnostic messages',
    'debug;d;;'   => 'With debug messages',
    'help;b;;'    => "Display this help and exit",
    'version,V;b;;' => "Output version information and exit",
    );

##
## Profile and option processing
##

init_opt(\@OptConfig);
read_cfg();
read_opt(\@ARGV); # help?
print("${VERSION_INFORMATION}") && exit $EXIT_SUCCESS if $opt_version;
help($EXPLANATION) && exit $EXIT_SUCCESS if $opt_help;
debug_option($opt_debug) if $opt_debug;

##
## Main
##

my $default_folder = cur_folder(); # must set here

#
# Fix some valuables
#

@opt_src = sortuniq(@opt_src);

@opt_src or @opt_src = ($default_folder);
@default_ranges = (@ARGV ? @ARGV : 'all');

if ($opt_format eq 'number' and @opt_src > 1) {
    $opt_format = 'path';
}

#
# Compile expression
#

$eval_string = parse_expression($opt_expression, $opt_casefold);

#
# Iterate each folder
#
my $matched = 0;

 FOLDER:
    foreach (@opt_src) {
	my($folder, $ranges) = (/^(.*?)(:$ranges_regexp)?$/);
	$ranges =~ s/^:(.*)$/$1/;
	my $folder_dir;
	my @ranges = split(',', $ranges);
	my @messages = ();

	if ($folder =~ /^\-/) {
	    im_warn("Newsspool $folder search not supported (ignored)\n");
	    next FOLDER;
	}

	@ranges = ($ranges ? @ranges : @default_ranges);

	$folder_dir = expand_path($folder);

	@messages = grep_folder($folder_dir, $eval_string, 
				$opt_dupchecktarget, @ranges);
	if (@messages) {
	    $matched += @messages;
	    foreach (@messages) {
		print "$folder:" if ($opt_format eq 'folder');
		print "$folder_dir/" if ($opt_format eq 'path');
		print "$_\n";
		# flush('STDOUT');
	    }
	}
    }

$matched
    or do {
	if ($opt_quiet) {
	    exit $EXIT_ERROR;
	} else {
	    im_die2("no message matches specifications\n");
	}
    };
exit $EXIT_SUCCESS;

##
## End of Main
##
##################################################

__END__

=head1 NAME

imgrep - search for mail/news messages

=head1 SYNOPSIS

B<imgrep> [OPTIONS] [FOLDER] [RANGE]

=head1 DESCRIPTION

The I<imgrep> command enumerates mail/news messages matched given patterns.

This command is provided by IM (Internet Message).

=head1 OPTIONS

=over 5

=item I<-s, --src=FOLDER,FOLDER...>

message source: "+folder:[range[,range..]]".

"--src=+xxx" is equivalent to "+xxx".

=item I<-f, --format=STRING>

Output format: "number", "folder", or "path".

(default: "number" for single target folder, "path" for multiple target folders)

=item I<-c, --casefold={on,off}>

Case sensitivity.
(This option affects both fieldname and pattern.)

Default value is "on".

=item I<-e, --expression=STRING>

Search expression:

Usable keyword

	& &&	logical AND

	| ||	logical OR

	!	logical NOT

	( )	parens

	fieldname=pattern	search pattern for the field

Special fieldname:

	head	Entire header

	body	Entire body

	all	Entire message

=item I<-d, --delimiter=STRING>

Mail header delimiter.

Default value is "\n\n|\n----\n".

=item I<-D, --dupchecktarget=STRING>

Duplicate check target ('none', 'message-id', or 'message-id+subject').
Default value is 'none'.

=item I<-q, --quiet={on,off}>

Do not show any messages.

=item I<-v, --verbose={on,off}>

Print verbose messages when running.

=item I<--debug=DEBUG_OPTION>

Print debug messages when running.

=item I<-h, --help>

Display help message and exit.

=item I<--version>

Output version information and exit.

=back

=head1 COPYRIGHT

IM (Internet Message) is copyrighted by IM developing team.
You can redistribute it and/or modify it under the modified BSD
license.  See the copyright file for more details.

=cut

### Copyright (C) 1997, 1998, 1999 IM developing team
### All rights reserved.
### 
### Redistribution and use in source and binary forms, with or without
### modification, are permitted provided that the following conditions
### are met:
### 
### 1. Redistributions of source code must retain the above copyright
###    notice, this list of conditions and the following disclaimer.
### 2. Redistributions in binary form must reproduce the above copyright
###    notice, this list of conditions and the following disclaimer in the
###    documentation and/or other materials provided with the distribution.
### 3. Neither the name of the team nor the names of its contributors
###    may be used to endorse or promote products derived from this software
###    without specific prior written permission.
### 
### THIS SOFTWARE IS PROVIDED BY THE TEAM AND CONTRIBUTORS ``AS IS'' AND
### ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
### IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
### PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE TEAM OR CONTRIBUTORS BE
### LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
### CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
### SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
### BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
### WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
### OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
### IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

### Local Variables:
### mode: perl
### End:
